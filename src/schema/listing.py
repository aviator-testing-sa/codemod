#
# listing.py
#
#
from sqlalchemy import orm, Column, String, Boolean, Integer, Text, DateTime, ForeignKey
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Listing(Base):
    __tablename__ = 'listing'

    id = Column(Integer, primary_key=True)  # Assuming you want to keep the id
    # who's doing the listing
    userid = Column(ForeignKey('user.id'), nullable=False)

    #
    status = Column(String)     # draft|published

    # info
    name = Column(String, nullable=False, index=True)
    domain = Column(String, nullable=False, index=True)
    category = Column(String, nullable=False, index=True)
    slug = Column(String, nullable=False, index=True) # autogenerated

    app_ios = Column(Boolean, default=False)
    app_android = Column(Boolean, default=False)
    web_app = Column(Boolean, default=False)
    iot = Column(Boolean, default=False)
    robotics = Column(Boolean, default=False)

    # images
    cover_image_url = Column(String)
    product_icon_url = Column(String)
    # other images are stored as ListingImage in image schema

    incorporated = Column(Boolean, default=False)
    employees = Column(Integer)

    product_info = Column(Text)
    tech_stack = Column(Text)
    founder_info = Column(Text)

    # busienss metrics
    launch_date = Column(DateTime)      # day it was launched
    mau = Column(Integer)               # monthly active users
    revenue_cents = Column(Integer)     # monthly revenue in cents
    investment_cents = Column(Integer)  # total investment
    total_customers = Column(Integer)   # size of customer base
    misc_info = Column(Text)            # additional info

    # links
    linkedin = Column(String)
    angellist = Column(String)
    crunchbase = Column(String)

    user = relationship('User', backref=backref('listings', uselist=True))

    @property
    def cover_image(self):
        return self.cover_image_url or '/static/images/bg.jpg'

    @property
    def product_icon(self):
        return self.product_icon_url or '/static/images/avatar.jpg'

    @classmethod
    def filter_like_name(cls, name, asmatch=False):
        if asmatch:
            return cls.name.match(name)
        return cls.name.like('%{}%'.format(name))

    @classmethod
    def filter_like_domain(cls, domain, asmatch=False):
        if asmatch:
            return cls.domain.match(name)
        return cls.domain.like('%{}%'.format(domain))

    @classmethod
    def filter_like_category(cls, category, asmatch=False):
        if asmatch:
            return cls.category.match(category)
        return cls.category.like('%{}%'.format(category))
